import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import com.android.build.gradle.BasePlugin as AndroidBasePlugin

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext.versions = [
    compileSdk: 33,
    kotlin: '1.8.21',
    composeUi: '1.4.3',
    composeCompiler: '1.4.7',
    composeMaterial3: '1.1.0',
    accompanist: '0.28.0',
  ]

  repositories {
    google()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.0.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    classpath "com.vanniktech:gradle-maven-publish-plugin:0.24.0"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.8.10"
    classpath "app.cash.paparazzi:paparazzi-gradle-plugin:1.3.0"
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  }
}

tasks.register('clean', Delete) {
  delete rootProject.buildDir
}

// Used on CI to prevent publishing of non-snapshot versions.
tasks.register('throwIfVersionIsNotSnapshot') {
  def libraryVersion = project.findProperty("VERSION_NAME") as String
  if (!libraryVersion.endsWith("SNAPSHOT")) {
    throw IllegalStateException("Project isn't using a snapshot version = $libraryVersion")
  }
}

allprojects {
  plugins.withType(com.android.build.gradle.BasePlugin).configureEach {
    project.android {
      compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
      }
    }
  }
  tasks.withType(KotlinJvmCompile).configureEach {
    compilerOptions {
      jvmTarget.set(JvmTarget.JVM_11)
    }
  }
}
